"""
 A keystone list
"""
type Plant {
  id: ID!
  name: String
  latinName: String
  description: Plant_description_DocumentField
  photo: CloudinaryImage_File
  plantZones(
    where: PlantZoneWhereInput! = {}
    search: String
    sortBy: [SortPlantZonesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PlantZoneOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [PlantZone!]
  _plantZonesMeta(
    where: PlantZoneWhereInput! = {}
    search: String
    sortBy: [SortPlantZonesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PlantZoneOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use plantZonesCount instead."
    )
  plantZonesCount(where: PlantZoneWhereInput! = {}): Int
}

type Plant_description_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

type _QueryMeta {
  count: Int
}

input PlantWhereInput {
  AND: [PlantWhereInput!]
  OR: [PlantWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  latinName: String
  latinName_not: String
  latinName_contains: String
  latinName_not_contains: String
  latinName_starts_with: String
  latinName_not_starts_with: String
  latinName_ends_with: String
  latinName_not_ends_with: String
  latinName_i: String
  latinName_not_i: String
  latinName_contains_i: String
  latinName_not_contains_i: String
  latinName_starts_with_i: String
  latinName_not_starts_with_i: String
  latinName_ends_with_i: String
  latinName_not_ends_with_i: String
  latinName_in: [String]
  latinName_not_in: [String]
  photo: String
  photo_not: String
  photo_in: [String]
  photo_not_in: [String]

  """
   condition must be true for all nodes
  """
  plantZones_every: PlantZoneWhereInput

  """
   condition must be true for at least 1 node
  """
  plantZones_some: PlantZoneWhereInput

  """
   condition must be false for all nodes
  """
  plantZones_none: PlantZoneWhereInput
}

input PlantWhereUniqueInput {
  id: ID
}

enum SortPlantsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  latinName_ASC
  latinName_DESC
}

input PlantOrderByInput {
  id: OrderDirection
  name: OrderDirection
  latinName: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PlantUpdateInput {
  name: String
  latinName: String
  description: JSON
  photo: Upload
  plantZones: PlantZoneRelateToManyInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input PlantZoneRelateToManyInput {
  create: [PlantZoneCreateInput]
  connect: [PlantZoneWhereUniqueInput]
  disconnect: [PlantZoneWhereUniqueInput]
  disconnectAll: Boolean
}

input PlantsUpdateInput {
  id: ID!
  data: PlantUpdateInput
}

input PlantCreateInput {
  name: String
  latinName: String
  description: JSON
  photo: Upload
  plantZones: PlantZoneRelateToManyInput
}

input PlantsCreateInput {
  data: PlantCreateInput
}

"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
 A keystone list
"""
type PlantZone {
  id: ID!
  name: String
  plants(
    where: PlantWhereInput! = {}
    search: String
    sortBy: [SortPlantsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PlantOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Plant!]
  _plantsMeta(
    where: PlantWhereInput! = {}
    search: String
    sortBy: [SortPlantsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PlantOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use plantsCount instead."
    )
  plantsCount(where: PlantWhereInput! = {}): Int
}

input PlantZoneWhereInput {
  AND: [PlantZoneWhereInput!]
  OR: [PlantZoneWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """
   condition must be true for all nodes
  """
  plants_every: PlantWhereInput

  """
   condition must be true for at least 1 node
  """
  plants_some: PlantWhereInput

  """
   condition must be false for all nodes
  """
  plants_none: PlantWhereInput
}

input PlantZoneWhereUniqueInput {
  id: ID
}

enum SortPlantZonesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input PlantZoneOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input PlantZoneUpdateInput {
  name: String
  plants: PlantRelateToManyInput
}

input PlantRelateToManyInput {
  create: [PlantCreateInput]
  connect: [PlantWhereUniqueInput]
  disconnect: [PlantWhereUniqueInput]
  disconnectAll: Boolean
}

input PlantZonesUpdateInput {
  id: ID!
  data: PlantZoneUpdateInput
}

input PlantZoneCreateInput {
  name: String
  plants: PlantRelateToManyInput
}

input PlantZonesCreateInput {
  data: PlantZoneCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  """
   Create a single Plant item.
  """
  createPlant(data: PlantCreateInput): Plant

  """
   Create multiple Plant items.
  """
  createPlants(data: [PlantsCreateInput]): [Plant]

  """
   Update a single Plant item by ID.
  """
  updatePlant(id: ID!, data: PlantUpdateInput): Plant

  """
   Update multiple Plant items by ID.
  """
  updatePlants(data: [PlantsUpdateInput]): [Plant]

  """
   Delete a single Plant item by ID.
  """
  deletePlant(id: ID!): Plant

  """
   Delete multiple Plant items by ID.
  """
  deletePlants(ids: [ID!]): [Plant]

  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single PlantZone item.
  """
  createPlantZone(data: PlantZoneCreateInput): PlantZone

  """
   Create multiple PlantZone items.
  """
  createPlantZones(data: [PlantZonesCreateInput]): [PlantZone]

  """
   Update a single PlantZone item by ID.
  """
  updatePlantZone(id: ID!, data: PlantZoneUpdateInput): PlantZone

  """
   Update multiple PlantZone items by ID.
  """
  updatePlantZones(data: [PlantZonesUpdateInput]): [PlantZone]

  """
   Delete a single PlantZone item by ID.
  """
  deletePlantZone(id: ID!): PlantZone

  """
   Delete multiple PlantZone items by ID.
  """
  deletePlantZones(ids: [ID!]): [PlantZone]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  """
   Search for all Plant items which match the where clause.
  """
  allPlants(
    where: PlantWhereInput! = {}
    search: String
    sortBy: [SortPlantsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PlantOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Plant!]

  """
   Search for the Plant item with the matching ID.
  """
  Plant(where: PlantWhereUniqueInput!): Plant

  """
   Perform a meta-query on all Plant items which match the where clause.
  """
  _allPlantsMeta(
    where: PlantWhereInput! = {}
    search: String
    sortBy: [SortPlantsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PlantOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use plantsCount instead."
    )
  plantsCount(where: PlantWhereInput! = {}): Int

  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int

  """
   Search for all PlantZone items which match the where clause.
  """
  allPlantZones(
    where: PlantZoneWhereInput! = {}
    search: String
    sortBy: [SortPlantZonesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PlantZoneOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [PlantZone!]

  """
   Search for the PlantZone item with the matching ID.
  """
  PlantZone(where: PlantZoneWhereUniqueInput!): PlantZone

  """
   Perform a meta-query on all PlantZone items which match the where clause.
  """
  _allPlantZonesMeta(
    where: PlantZoneWhereInput! = {}
    search: String
    sortBy: [SortPlantZonesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PlantZoneOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use plantZonesCount instead."
    )
  plantZonesCount(where: PlantZoneWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
